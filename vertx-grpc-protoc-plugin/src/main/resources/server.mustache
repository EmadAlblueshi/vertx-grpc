{{#packageName}}
package {{packageName}};
{{/packageName}}

import io.vertx.core.Promise;
import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServerRequest;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.server.GrpcServer;

import java.util.ArrayList;
import java.util.List;

public class {{className}}  {
  private final GrpcServer server;

  public {{className}}(Vertx vertx) {
    this.server = GrpcServer.server(vertx);
  }

  public interface {{serviceName}}Api {
{{#unaryMethods}}
    default void {{methodName}}({{inputType}} request, Promise<{{outputType}}> response) {}
{{/unaryMethods}}
{{#unaryManyMethods}}
    default void {{methodName}}({{inputType}} request, WriteStream<{{outputType}}> response) {}
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default void {{methodName}}(ReadStream<{{inputType}}> request, Promise<{{outputType}}> response) {}
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default void {{methodName}}(ReadStream<{{inputType}}> request, WriteStream<{{outputType}}> response) {}
{{/manyManyMethods}}
  }

  public {{className}} callHandlers({{serviceName}}Api implementation) {
{{#unaryMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      Promise<{{outputType}}> promise = Promise.promise();
      request.handler(req -> implementation.{{methodName}}(req, promise));
      promise.future().onSuccess(resp -> request.response().end(resp));
    });
{{/unaryMethods}}
{{#unaryManyMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      request.handler(req -> implementation.{{methodName}}(req, request.response()));
    });
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      Promise<{{outputType}}> promise = Promise.promise();
      implementation.{{methodName}}(request, promise);
      promise.future().onSuccess(resp -> request.response().end(resp));
    });
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      implementation.{{methodName}}(request, request.response());
    });
{{/manyManyMethods}}
    return this;
  }

  public Handler<HttpServerRequest> getGrpcServer() {
    return server;
  }
}
