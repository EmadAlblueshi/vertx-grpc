{{#packageName}}
package {{packageName}};
{{/packageName}}

import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpServerRequest;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.server.GrpcServer;
import io.vertx.grpc.server.GrpcServerResponse;

import java.util.ArrayList;
import java.util.List;

public class {{className}}  {
  private final GrpcServer server;

  public {{className}}(GrpcServer server) {
    this.server = server;
  }

  public interface {{serviceName}}Api {
{{#unaryMethods}}
  default Future<{{outputType}}> {{methodName}}({{inputType}} request) {
    throw new UnsupportedOperationException("Not implemented");
  }
  default void {{methodName}}({{inputType}} request, Promise<{{outputType}}> response) {
    try {
      {{methodName}}(request)
        .onSuccess(msg -> response.complete(msg))
        .onFailure(error -> response.fail(error));
    } catch (Throwable err) {
      response.fail(err);
    }
  }
{{/unaryMethods}}
{{#unaryManyMethods}}
    default ReadStream<{{outputType}}> {{methodName}}({{inputType}} request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}({{inputType}} request, GrpcServerResponse<{{inputType}}, {{outputType}}> response) {
      try {
        {{methodName}}(request)
          .handler(msg -> response.write(msg))
          .endHandler(msg -> response.end())
          .resume();
      } catch  (Throwable err) {
        response.status(GrpcStatus.INTERNAL).end();
      }
    }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default Future<{{outputType}}> {{methodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}(ReadStream<{{inputType}}> request, Promise<{{outputType}}> response) {
      try {
        {{methodName}}(request)
          .onSuccess(msg -> response.complete(msg))
          .onFailure(error -> response.fail(error));
      } catch (Throwable err) {
        response.fail(err);
      }
    }
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default ReadStream<{{outputType}}> {{methodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}(ReadStream<{{inputType}}> request, WriteStream<{{outputType}}> response) {
      {{methodName}}(request)
        .handler(msg -> response.write(msg))
        .endHandler(msg -> response.end())
        .resume();
    }
{{/manyManyMethods}}
  }

  public {{className}} callHandlers({{serviceName}}Api implementation) {
{{#unaryMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      Promise<{{outputType}}> promise = Promise.promise();
      request.handler(req -> implementation.{{methodName}}(req, promise));
      promise.future()
        .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
        .onSuccess(resp -> request.response().end(resp));
    });
{{/unaryMethods}}
{{#unaryManyMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      request.handler(req -> implementation.{{methodName}}(req, request.response()));
    });
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      Promise<{{outputType}}> promise = Promise.promise();
      implementation.{{methodName}}(request, promise);
      promise.future()
        .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
        .onSuccess(resp -> request.response().end(resp));
    });
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
      implementation.{{methodName}}(request, request.response());
    });
{{/manyManyMethods}}
    return this;
  }
}
